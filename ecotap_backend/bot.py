import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from config import BOT_TOKEN
from database import db
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_tunnel_url():
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π URL –∏–∑ tunnel.log"""
    try:
        with open("tunnel.log", "r") as f:
            lines = f.readlines()
            for line in reversed(lines):
                if "trycloudflare.com" in line:
                    url = line.split()[-1]
                    if url.startswith("https://"):
                        return url
    except Exception as e:
        logging.warning(f"Tunnel URL not –Ω–∞–π–¥–µ–Ω: {e}")
    return "https://example.com"  # fallback

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_new_user = await db.register_user(user_id, username, first_name, last_name)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL —Ç—É–Ω–Ω–µ–ª—è
    tunnel_url = get_tunnel_url()
    webapp_button = InlineKeyboardButton(
        text="üå± Play EcoTap",
        web_app=WebAppInfo(url=tunnel_url)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])

    if is_new_user:
        welcome_text = (
            f"üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoTap, {first_name}!\n\n"
            "üéÆ –¢–∞–ø–∞–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ –∏ –≤—ã—Ä–∞—â–∏–≤–∞–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ª–µ—Å!\n"
            "üíß –ö–∞–∂–¥—ã–π —Ç–∞–ø = 1 –æ—á–∫–æ\n"
            "üå≥ 1000 –æ—á–∫–æ–≤ = 1 –¥–µ—Ä–µ–≤–æ\n"
            "‚ö° –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
        )
    else:
        progress = await db.get_user_progress(user_id)
        if progress:
            welcome_text = (
                f"üåø –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
                f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f"üå≥ –î–µ—Ä–µ–≤—å–µ–≤: {progress['trees']}\n"
                f"üí∞ –û—á–∫–æ–≤: {progress['points']}\n"
                f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {progress['level']}\n"
                f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {progress['energy']}/100\n"
                f"üëÜ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: {progress['total_taps']}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —Å–≤–æ–π –ª–µ—Å!"
            )
        else:
            welcome_text = "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoTap! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"

    await message.answer(welcome_text, reply_markup=keyboard)

async def main():
    await db.init_db()
    print("ü§ñ EcoTap –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
